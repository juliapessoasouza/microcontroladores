1 - a)


	float Raiz_Quadrada(unsigned int S)
	{
		float x = 1;
		for (int i = 0; i < 50; i++)
			x = (x + S / x) / 2;
		return x;
  }
  
b)

sqrt:
            mov.w #1, R14		; x = 1
            mov.w #0, R13		; i = 0
            mov.w R15,R12		; R12 = S
for_sqrt    cmp #50, R13		; i < 50
            jeq end_sqrt        ; Pular para o fim do loop
            mov.w R12,R15		; R15 = S -> Pegar sempre o valor de S e não alterá-lo a cada iteração
            push R13            ; R13 na stack
            call #Div_unsigned	; R15 = R15 / R14 -> S/x
            add R15, R14		; x = x+S/x
            rra R14     		; R14 / 2
            pop R13             ; Recuperar R13
            inc.w R13			; i++
            jmp for_sqrt
end_sqrt    mov.w R14,R15
ret


2 - a)


	int Potencia(int x, int N)
	{
		if(N == 0) return 1;
		int retn = x;
		for(int i = 0; i < N-1; i++)
			retn *= x;
		return retn;
}

b)

Potencia:
                        cmp #0, R14		; N == 0
                        jeq Potencia_1
                        mov.w #0, R12		; i = 0
                        dec.w R14		; N--
                        mov.w R15, R13          ; R13 = X
	loop_potencia:	cmp R14, R12		; i < N-1
                        jeq Fim_potencia	; Pular se i == N-1
                        push R14
                        push R12
                        push R13
                        mov.w R13, R14		; R14 = x
                        call #Mult_unsigned	; R15 = R15*x
                        pop R13
                        pop R12
                        pop R14
                        inc.w R12	        ; i++
                        jmp loop_potencia
	Potencia_1:     mov.w #1, R15
  Fim_potencia: 	ret


3 - 

Div_unsigned:
			clr R13;
	for_div		cmp R14,R15
			jl End_for_div
			sub R14,R15
			inc R13
			jmp for_div
	End_for_div: 	mov R13,R15
			ret

4 - 

Resto_unsigned:
			clr R13;
	for_resto	cmp R14,R15
			jl End_for_resto
			sub R14,R15
			inc R13
			jmp for_resto
	End_for_resto: 	mov R13,R15
			ret
5 - a)

int Primalidade(unsigned int x)
	{
		if(x<2) return 0;
		for(int i = 2; i <= x; i++)
		{
			if(x % i == 0 && x != i)
				return 0;
		}
		return 1;
}

b)

Primalidade: 	mov.w #1,R14	; R14 é o valor do índice (i = 1).
		mov.w #0,R12	; R12 é o registrador que conta as vezes que o resto é zero.
looping:     	push.w R15		; Joga o valor de R15 (Número analisado) para a pilha para usar a função #CalculaRST.
		call #CalculaRST
		inc.w R14		; i++ 
		cmp #0,R15		; R15, como é resultado da função CalculaRST, indica o resto da divisão de R15/R14. 
		jne Condition	; if(R15 == 0) -> R12 ++ //indica se o resto é zero.
		inc.w R12		;	 R12 ++ ;
Condition:   	pop R15;	; Resgata o valor de R15, que é o número a ser analisado.
		cmp.w R14,R15	; Quando i = R15, então a análise terminou.
		jn FIM
		jmp looping	; FOR ...
FIM:        	cmp #2,R12         ; if(R12 == 2){ 
		jeq true		; 	R15 = 1;
		mov.w #0,R15	; }else{
		jmp false		;	R15 = 0;
true:	     	mov.w #1,R15	;      }
false: 		ret 

6 - 
